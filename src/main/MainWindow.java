/*
 * MainWindow.java
 *
 * Created on 2010/05/16, 0:56:28
 */

package main;

import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import twitter4j.conf.ConfigurationBuilder;
import twitter4j.media.ImageUpload;
import twitter4j.media.ImageUploadFactory;
import twitter4j.media.MediaProvider;

/**
 *
 * @author yayugu
 */
public class MainWindow extends javax.swing.JFrame {
	private static final long serialVersionUID = -3976795945998014593L;
	Data data = Data.getInstance();
	boolean ctrlPressed = false;

	/** Creates new form MainWindow */
	public MainWindow() {
		initComponents();
		ImageIcon imageIcon = new ImageIcon(getClass().getResource(
				"/main/resources/vim_16.png"));
		this.setIconImage(imageIcon.getImage());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textArea = new javax.swing.JTextArea();
        labelCount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vim - mitai na nanika");

        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setMinimumSize(new java.awt.Dimension(1, 1));
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainWindow.this.keyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MainWindow.this.keyReleased(evt);
            }
        });

        labelCount.setText("140");
        labelCount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCountClick(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelCount))
            .addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(textArea, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCount))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void labelCountClick(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_labelCountClick
		if (javax.swing.SwingUtilities.isRightMouseButton(evt)) {
			java.awt.EventQueue.invokeLater(new Runnable() {
				public void run() {
					new AuthWindow().setVisible(true);
				}
			});
		} else if (javax.swing.SwingUtilities.isMiddleMouseButton(evt)) {

		} else if (javax.swing.SwingUtilities.isLeftMouseButton(evt)) {
			this.dispose();
			this.setUndecorated(!this.isUndecorated());
			this.setVisible(true);
		}
	}// GEN-LAST:event_labelCountClick

	private void keyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_keyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER && ctrlPressed) {
			try {
				data.twitter.updateStatus(textArea.getText());
			} catch (Exception e) {
				e.printStackTrace();
			}
			textArea.setText("");
		} else if (evt.getKeyCode() == KeyEvent.VK_CONTROL) {
			ctrlPressed = true;
		}
	}// GEN-LAST:event_keyPressed

	private void keyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_keyReleased
		if (evt.getKeyCode() == KeyEvent.VK_CONTROL) {
			ctrlPressed = false;
		}
		updateCount();
	}// GEN-LAST:event_keyReleased

	private void updateCount() {
		labelCount.setText(Integer.toString(140 - textArea.getText().length()));
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelCount;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

	/**
	 * File Drag and Drop.
	 */
	private class FileDDTarget extends DropTarget {
		public synchronized void drop(DropTargetDropEvent evt) {
			textArea.setEditable(false);
			try {
				evt.acceptDrop(DnDConstants.ACTION_REFERENCE);
				List<File> droppedFiles = (List<File>) evt.getTransferable()
						.getTransferData(DataFlavor.javaFileListFlavor);
				ConfigurationBuilder cb = new ConfigurationBuilder();
				cb.setOAuthConsumerKey(data.consumerKey);
				cb.setOAuthConsumerSecret(data.consumerSecret);
				cb.setOAuthAccessToken(data.accessToken.getToken());
				cb.setOAuthAccessTokenSecret(data.accessToken.getTokenSecret());
				cb.setMediaProvider(MediaProvider.TWIPPLE.getName());
				ImageUploadFactory factory = new ImageUploadFactory(cb.build());
				ImageUpload imageupload = factory.getInstance();
				for (File file : droppedFiles) {
					String url = imageupload.upload(file);
					if (!textArea.getText().endsWith(" ")) {
						textArea.append(" ");
					}
					textArea.append(url);
				}
				textArea.append(" ");
			} catch (Exception ex) {
				JOptionPane.showMessageDialog(MainWindow.this, "ファイルアップロード失敗:" + ex.getMessage());
				ex.printStackTrace();
			} finally {
				textArea.setEditable(true);
			}
			updateCount();
		}
	}

}
